@page "/identity/account/login"

@inject ResourceIdeaAuthenticationStateProvider ResourceIdeaAuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="card col-6">
    <div class="card-header">
        <h3>Login</h3>
    </div>
    <div class="card-body">
        <EditForm EditContext="editContext" OnValidSubmit="@LoginAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label >Email</label>
                <InputText id="email" class="form-control" @bind-Value="model.Email" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
    <div class="card-footer">
        <a href="#" class="btn btn-link">Forgot Password?</a>
    </div>
</div>

@code {
    private AuthenticationRequest model = new AuthenticationRequest();
    private EditContext editContext = default!;
    private ValidationMessageStore validationMessageStore = default!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    private async Task LoginAsync()
    {
        if (!string.IsNullOrEmpty(model.Email) && !string.IsNullOrEmpty(model.Password))
        {
            var response = await ResourceIdeaAuthenticationStateProvider.LoginAsync(model.Email, model.Password);
            if (response.Success)
            {
                NavigationManager.NavigateTo("/", true);
            }

            model.Password = string.Empty;
            validationMessageStore.Add(editContext.Field(nameof(model.Email)), response.Message);
            editContext.NotifyValidationStateChanged();
        }
    }

}
