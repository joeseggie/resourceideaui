@namespace EastSeat.ResourceIdea.Web.Components.Clients

@inject IMediator Mediator

<NavLink href="/clients/new" class="mb-2 mt-2 btn btn-primary btn-sm">Add Client</NavLink>

<div class="card">
    <div class="card-header">
        <div class="input-group mb-3 mt-3">
            <input type="text" class="form-control" placeholder="Search clients by name"
                   aria-label="Search clients by name" aria-describedby="button-client-search" @bind="SearchTerm">
            <button class="btn btn-outline-primary" type="button" id="button-client-search" @onclick="SearchClients">
                <i class="fa-solid fa-magnifying-glass"></i>&nbsp;Search Clients
            </button>
        </div>
    </div>
</div>
@if (ListOfClients is not null && ListOfClients.Count > 0)
{
    <table class="table table-striped table-bordered table-sm">
        <thead class="table-info">
            <tr>
                <th><span @onclick="SortClients">Client name &nbsp;&nbsp;<i class="fa-solid @sortIcon small"></i></span></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in ListOfClients)
            {
                <tr><td>@client.Name</td></tr>
            }
        </tbody>
    </table>
    <PagedListBrowser HasPreviousPage="HasPreviousPage"
                      HasNextPage="HasNextPage"
                      OnNext="LoadNextPage"
                      OnPrevious="LoadPreviousPage" />
}
else
{
    <p class="m-3 lead">No clients have been added!</p>
}

@code {
    private IReadOnlyList<ClientListDTO> ListOfClients = [];
    private bool HasPreviousPage = false;
    private bool HasNextPage = false;
    private int CurrentPage = 1;
    private bool SortAscending = true;
    private string sortIcon = "fa-sort";
    private string SearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsList();
    }

    private async Task LoadNextPage()
    {
        CurrentPage += 1;
        await LoadClientsList();
    }

    private async Task LoadPreviousPage()
    {
        CurrentPage = CurrentPage > 1 ? CurrentPage - 1 : 1;
        await LoadClientsList();
    }

    private void SortClients()
    {
        if (SortAscending)
        {
            ListOfClients = ListOfClients.OrderBy(c => c.Name).ToList();
            SortAscending = false;
            sortIcon = "fa-sort-up";
        }
        else
        {
            ListOfClients = ListOfClients.OrderByDescending(c => c.Name).ToList();
            SortAscending = true;
            sortIcon = "fa-sort-down";
        }
    }

    private async Task SearchClients()
    {
        await LoadClientsList();
    }

    private async Task LoadClientsList()
    {
        var response = await Mediator.Send(new GetClientsListQuery
            {
                Page = CurrentPage,
                Filter = SearchTerm
            });
        ListOfClients = response.Items ?? Enumerable.Empty<ClientListDTO>().ToList();
        HasPreviousPage = response.CurrentPage > 1;
        HasNextPage = response.HasNextPage;
    }
}
