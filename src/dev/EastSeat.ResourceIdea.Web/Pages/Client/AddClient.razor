@page "/clients/new"

@using System.Security.Claims

@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>ResourceIdea - Add Client</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <PageHeader Title="Add New Client"></PageHeader>
        <NavLink href="/clients" class="btn btn-primary btn-sm mb-2 mt-2"><i class="fa-solid fa-chevron-left"></i> Back</NavLink>

        <NotificationMessage IsVisible="@IsVisible" Type="@NotificationMessageType" Text="@MessageText" />

        <div class="card bg-light">
            <div class="card-body">
                <ClientForm Model="@Model" OnValidSubmitAsync="HandleValidSubmitAsync" />
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <PageHeader Title="Add New Client"></PageHeader>
        <h1>Not Authorized</h1>
        <p>You're not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm]
    public ClientInput? Model { get; set; }

    private bool IsVisible { get; set; } = false;

    private MessageType NotificationMessageType { get; set; } = MessageType.Info;

    private string? MessageText { get; set; } = string.Empty;

    protected override void OnInitialized() => Model ??= new();

    private async Task HandleValidSubmitAsync()
    {
        if (Model is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            try
            {
                var input = new CreateClientCommand()
                    {
                        Id = Guid.NewGuid(),
                        Name = Model.Name ?? string.Empty,
                        Address = Model.Address ?? string.Empty,
                        SubscriptionId = HasUserSubscriptionId(user, out var subscriptionId) ? subscriptionId : Guid.Empty,
                        CreatedBy = HasUserId(user, out var userId) ? userId : string.Empty,
                        ColorCode = RandomHexColorCode()
                    };

                await Mediator.Send(input);

                Model = new();

                IsVisible = true;
                NotificationMessageType = MessageType.Success;
                MessageText = $"{Constants.Strings.SuccessMessagePrefix}Client added successfully.";
            }
            catch (ArgumentException)
            {
                IsVisible = true;
                NotificationMessageType = MessageType.Error;
                MessageText = $"{Constants.Strings.ErrorMessagePrefix}Client name or address are missing.";

                // TODO: Log the error message.
            }

            return;
        }

        IsVisible = true;
        NotificationMessageType = MessageType.Error;
        MessageText = $"{Constants.Strings.ErrorMessagePrefix}No client details submitted.";

        // TODO: Log no client details submitted.
    }

    private bool HasUserSubscriptionId(ClaimsPrincipal user, out Guid subscriptionId)
    {
        subscriptionId = Guid.Empty;
        if (IsAuthenticatedUser(user) && Guid.TryParse(user.FindFirst("SubscriptionId")?.Value, out subscriptionId))
        {
            return true;
        }
        return false;
    }

    private bool HasUserId(ClaimsPrincipal user, out string userId)
    {
        userId = string.Empty;
        if (IsAuthenticatedUser(user))
        {
            userId = user.FindFirst(ClaimTypes.PrimarySid)?.Value ?? string.Empty;
            return true;
        }
        return false;
    }

    private bool IsAuthenticatedUser(ClaimsPrincipal user)
    {
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            return true;
        }
        return false;
    }

    // TODO: Move this to the application layer since it will be used in multiple places.
    private string RandomHexColorCode()
    {
        var random = new Random();
        var color = String.Format("{0:X6}", random.Next(0x1000000));

        // TODO: Implement a method to check the uniqueness of the generated color code.
        //       If the color code is not unique, generate a new one.
        return color;
    }
}
