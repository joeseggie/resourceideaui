@page "/account/login"

@using EastSeat.ResourceIdea.DataStore.Identity.Entities
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> logger

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card p-3" style="width: 25rem;">
        <div class="card-body">
            <h5 class="card-title text-center">Enter your credentials to login</h5>
            <EditForm Model="Model" OnValidSubmit="HandleLogin" FormName="LoginForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email address</label>
                    <InputText 
                    type="email" 
                    class="form-control" 
                    @bind-Value="Model!.Email" 
                    placeholder="Enter email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="Model.Password" placeholder="Password" />
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new();
    }

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(
            Model?.Email ?? string.Empty,
            Model?.Password ?? string.Empty,
            isPersistent: false,
            lockoutOnFailure: false);

        if (result.Succeeded)
        {
            try
            {
                NavigationManager.NavigateTo("/", true, true);
            }
            catch (NavigationException exception)
            {
                logger.LogDebug(exception, $"Navigation exception occurred - {exception.Message}.");
            }
        }
        else
        {
            // TODO: @joeseggie - Add error handling for failed login attempts
            logger.LogInformation("Login attempt failed.");
        }
    }
}
